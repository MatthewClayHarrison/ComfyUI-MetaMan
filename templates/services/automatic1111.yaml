# Automatic1111 Output Template
# Defines how to format metadata for A1111 compatibility

service_name: "automatic1111"
output_format: "parameters_text"
description: "Template for generating A1111-compatible parameter strings"

# Field mapping and output formatting
format_template: |
  {prompt}
  {negative_prompt_line}
  {parameters_line}

# Field processing rules
field_processing:
  prompt:
    required: true
    position: 1
    format: "{value}"
    
  negative_prompt:
    required: false
    position: 2
    format: "Negative prompt: {value}"
    condition: "value is not None and value != ''"
    
  parameters:
    position: 3
    format: "{joined_params}"
    join_separator: ", "

# Parameter ordering for the parameters line
parameter_order:
  - "steps"
  - "sampler"
  - "cfg_scale"
  - "seed"
  - "size"
  - "model_hash"
  - "model"
  - "clip_skip"
  - "denoising_strength"
  - "eta"
  - "ensd"
  - "hires_fix"
  - "hires_upscaler"
  - "hires_steps"
  - "hires_denoising"

# Field formatting rules for parameters line
parameter_formatting:
  steps:
    format: "Steps: {value}"
    type: "integer"
    
  sampler:
    format: "Sampler: {value}"
    type: "string"
    mapping_source: "automatic1111"
    
  cfg_scale:
    format: "CFG scale: {value}"
    type: "float"
    precision: 1
    
  seed:
    format: "Seed: {value}"
    type: "integer"
    
  size:
    format: "Size: {width}x{height}"
    type: "composite"
    fields: ["width", "height"]
    condition: "width is not None and height is not None"
    
  model_hash:
    format: "Model hash: {value}"
    type: "string"
    condition: "value is not None and value != ''"
    
  model:
    format: "Model: {value}"
    type: "string"
    source_field: "model_name"
    condition: "value is not None and value != ''"
    
  clip_skip:
    format: "Clip skip: {value}"
    type: "integer"
    condition: "value is not None and value > 1"
    
  denoising_strength:
    format: "Denoising strength: {value}"
    type: "float"
    precision: 2
    condition: "value is not None and value != 0.75"
    
  eta:
    format: "Eta: {value}"
    type: "float"
    precision: 2
    condition: "value is not None and value != 0.0"
    
  ensd:
    format: "ENSD: {value}"
    type: "integer"
    condition: "value is not None"
    
  hires_fix:
    format: "Hires fix: {value}"
    type: "boolean"
    condition: "value is True"
    boolean_format: "True"
    
  hires_upscaler:
    format: "Hires upscaler: {value}"
    type: "string"
    condition: "hires_fix is True and value is not None"
    
  hires_steps:
    format: "Hires steps: {value}"
    type: "integer"
    condition: "hires_fix is True and value is not None and value > 0"
    
  hires_denoising:
    format: "Hires denoising: {value}"
    type: "float"
    precision: 2
    condition: "hires_fix is True and value is not None"

# Special handling for arrays
array_handling:
  loras:
    format: "<lora:{name}:{weight}>"
    embed_in: "prompt"
    join_separator: " "
    
  embeddings:
    format: "{name}"
    embed_in: "prompt"
    join_separator: " "

# PNG chunk configuration
png_chunk:
  chunk_name: "parameters"
  encoding: "latin-1"
  fallback_encoding: "utf-8"
  compress: false

# Validation rules
validation:
  required_fields: ["prompt"]
  max_length: 65535  # PNG text chunk limit
  encoding_fallback: true
